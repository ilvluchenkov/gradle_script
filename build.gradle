//Wrapper:  Running 'gradle wrapper' will generate gradlew.
task wrapper(type: Wrapper) {
        gradleVersion = '2.5'
        }

//Use temp. Local Repo.
buildscript {
    repositories {
	flatDir {
		dirs 'repos'
	}
}
	dependencies {
		fileTree(dir: 'repos', include: ['*.jar'])

//classpath files ('/plugin/gradle-ssh-plugin-0.1.7.jar')
//classpath 'org.hidetake:gradle-ssh-plugin:0.1.7'
//buildscript.dependencies.classpath files(new File(gradle.gradleUserHomeDir, './plugin/gradle-ssh-plugin-0.1.7.jar'))
		}    
}
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'groovy'
buildDir = 'ru.sspd.snmpcg'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8


//This schema uses Major, Minor and Patch versions, together with -SNAPSHOT and -RC suffixes.

version = new Version(major: 4, minor: 8, patch:2, releaseType: 'rc', bugfix: 0)

task listJars << {
        println "Project version: $project.version"
        configurations.archives.allArtifactFiles.files.each {
                println "Artifact: $it.name"
        }
}
listJars.dependsOn 'assemble'

        class Version {
                int major
                int minor
                int patch
                int bugfix
                String releaseType

                String toString() {
                "$major.$minor.$patch-$releaseType${bugfix ?: ''}"
        }
}

//Make Artifact: [baseName]-[version]
jar {
        baseName = 'camel-snmpcg'
        destinationDir = new File ("$buildDir")
	//version = '4.8.2'
        from('src/main/java'){
        include '**/*.chints'
     }
}


// Conf. SCP by AntBuilder For Compile Project.
configurations {
	sshAntTask
}

repositories {
	flatDir {
		dirs 'repos', 'runtime'
	}
}

dependencies {
	sshAntTask 'org.apache.ant:ant-jsch:1.9.6', 'com.jcraft:jsch:0.1.53'
        compile fileTree(dir: 'repos', include: ['*.jar'])
	}	

//Copy Local File To Remote Dir By Scp:
task sendToRemoteServer {
	def console2 = System.console()
//	File f = new File("ru.sspd.snmpcg")
//	f.mkdirs()
		ant.taskdef(name: 'scp', classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp', classpath: configurations.sshAntTask.asPath)
		ant.scp(todir: 'ium:ium7403010@192.168.20.77:/home/ium/artifact',trust: 'true') { 
			fileset(dir: '.') {
				include(name: '**/*.tar')
	}
}           

//Copy JAR's (Dep.) from remote repo to local dir. for compile.
task copyRemoteFileToLocalDir {
      def console = System.console()
	ant.taskdef(name: 'scp', classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp', classpath: configurations.sshAntTask.asPath)
	ant.scp(file: 'ium:ium7403010@192.168.20.77:/home/ium/repo/snmpcg/*', todir: 'repos', trust: 'true')

}

// Delete Dir Not Used:
task delDir(type: Delete ) {
    	delete ('ru.sspd.snmpcg/tmp')
	delete ('ru.sspd.snmpcg/classes')
	delete ('ru.sspd.snmpcg/dependency-cache')
	delete ('ru.sspd.snmpcg/reports')
	delete ('ru.sspd.snmpcg/test-results')
}
clean.dependsOn(delDir)

//Forming Plugin Name And Tar Arch:
task tarPlugin(type: Tar) {
 	  from ('.//ru.sspd.snmpcg/')
 	  baseName = '/ru.sspd.snmpcg'
	destinationDir = file("${buildDir}-${version}")
 	  extension = 'tar'
 	  compression = Compression.GZIP
	  includeEmptyDirs = false
	  duplicatesStrategy = 'exclude'
}

//Copy Additional Dir For Project:
task copyAdd << {

copy { from 'log'
       into 'ru.sspd.snmpcg/log'}
copy { from 'etc'	
       into 'ru.sspd.snmpcg/etc'}
copy { from 'sups'
       into 'ru.sspd.snmpcg/sups'}
copy { from '../web'
       into 'ru.sspd.snmpcg/web'}
copy { from '1.txt', 'restAPI_1.0.txt', 'REST_API.md', 'README.md', 'run.sh'
       into 'ru.sspd.snmpcg/'}
}

clean.dependsOn(copyAdd)

//copy Dependencies to Local Dir.
task copyDependencies << {
  [ 'compile','runtime' ].each { mode ->  copy {
      from configurations.getByName(mode).files
      into 'JAR'
    }
  }
}


//RUN BUILD:
task runBuild(type: Exec) {
                commandLine 'gradle', 'build', 'delDir', 'cA', 'tP', 'rR'
        }
task runRun(type: Exec) {
                commandLine 'gradle', 'sTRS'
}

task generateBuildSignature << {
    }

    ant.propertyfile(
        file: "./buildsignature.properties",
        comment: "This file is automatically generated - DO NOT EDIT!" ) {
        entry( key: "version", value: "${project.version}" )
        entry( key: "buildTimestamp", value: "${new Date().format('yyyyMMdd  HH:mm:ss Z')}" )
	}
}













